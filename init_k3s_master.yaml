- name: Установка и настройка K3s master node и Helm на сервере
  hosts: k3s_master
  become: true
  tasks:
    - name: Получаем информацию по файлу /usr/local/bin/k3s
      ansible.builtin.stat:
        path: /usr/local/bin/k3s
      register: k3s_bin

    - name: Установка K3s
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | sh -
      args:
        creates: /usr/local/bin/k3s
      environment:
        K3S_KUBECONFIG_MODE: "644"
      when: not k3s_bin.stat.exists

    - name: Создание директории для конфига запуска k3s
      ansible.builtin.file:
        path: "/etc/systemd/system/k3s.service.d"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Создаем службу для запуска k3s
      ansible.builtin.copy:
        dest: "/etc/systemd/system/k3s.service.d/override.conf"
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/local/bin/k3s server --https-listen-port 6443 --bind-address 10.8.0.1 --advertise-address 10.8.0.1 --node-ip 10.8.0.1
      notify:
        - restart_k3s

    - name: Получаем версию k3s
      ansible.builtin.command: /usr/local/bin/k3s --version
      register: k3s_version
      changed_when: false

    - name: Выводим версию k3s
      ansible.builtin.debug:
        msg: "K3s version: {{ k3s_version.stdout }}"

    - name: |
        Устанавливаем переменную окружения KUBECONFIG, чтобы программы которые работают с k3s работали корректно
        Например, так как нестандартный хост и порт у k3s, то helm не работает, так как обращается к стандартным
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: 'KUBECONFIG="/etc/rancher/k3s/k3s.yaml"'
        create: yes
        state: present

    - name: Получаем информацию по файлу /usr/local/bin/helm
      ansible.builtin.stat:
        path: /usr/local/bin/helm
      register: helm_bin

    - name: Устанавливаем helm
      ansible.builtin.shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm
      when: not helm_bin.stat.exists

    - name: Получаем версию helm
      ansible.builtin.command: helm version --short
      register: helm_version
      changed_when: false

    - name: Выводим версию helm
      debug:
        msg: "Helm version: {{ helm_version.stdout }}"

    - name: Проверка, установлен ли Argo CD
      ansible.builtin.shell: |
        helm status argocd -n argocd
      register: argocd_check
      ignore_errors: yes

    - name: Проверка, установлен ли Grafana operator (для dashboards)
      ansible.builtin.shell: |
        helm status grafana-operator -n grafana-operator
      register: grafana_operator_check
      ignore_errors: yes

    - name: Добавление репозитория Argo CD
      ansible.builtin.shell: |
        helm repo add argo https://argoproj.github.io/argo-helm

    - name: Добавление репозитория Grafana operator
      ansible.builtin.shell: |
        helm repo add grafana-operator https://grafana.github.io/helm-charts

    - name: Обновление репозиториев Helm
      ansible.builtin.shell: |
        helm repo update

    - name: Установка Argo CD
      ansible.builtin.shell: |
        helm install argocd argo/argo-cd --namespace argocd --create-namespace
      when: argocd_check.rc != 0

    - name: Установка Grafana operator
      ansible.builtin.shell: |
        helm install grafana-operator grafana-operator/grafana-operator --namespace grafana-operator --create-namespace
      when: grafana_operator_check.rc != 0

    - name: Проверка, установлен ли ArgoCD CLI
      ansible.builtin.command: argocd
      register: argocdcli_check
      ignore_errors: yes

    - name: Загрузка и установка ArgoCD CLI
      ansible.builtin.shell: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
      when: argocdcli_check.rc != 0

  handlers:
    - name: restart_k3s
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: yes
        state: restarted
